x-logging: &default-logging
    options: { max-size: '10m', max-file: '3' }

x-mongo-common: &mongo-common
    image: ${MONGO_IMAGE}
    profiles: ['infra']
    logging: *default-logging
    environment:
        MONGO_INITDB_ROOT_USERNAME: '${MONGO_USERNAME}'
        MONGO_INITDB_ROOT_PASSWORD: '${MONGO_PASSWORD}'
    command: mongod --replSet ${MONGO_REPLICA} --keyFile /etc/mongodb/mongodb.key --bind_ip_all
    volumes: ['mongodb_key:/etc/mongodb']
    networks: ['default']
    restart: always
    depends_on: ['mongo-key-generator']
    healthcheck:
        test: "mongosh --quiet -u $MONGO_USERNAME -p $MONGO_PASSWORD --authenticationDatabase admin --eval 'rs.isMaster().ismaster || rs.isMaster().secondary'"
        interval: 5s
        timeout: 5s

x-redis-common: &redis-common
    image: ${REDIS_IMAGE}
    command: 'redis-server --port $REDIS_PORT --requirepass $REDIS_PASSWORD --masterauth $REDIS_PASSWORD --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 5000 --appendonly yes'
    profiles: ['infra']
    logging: *default-logging
    networks: ['default']
    restart: always
    healthcheck:
        test: 'redis-cli -a $REDIS_PASSWORD ping'
        interval: 5s
        timeout: 5s

x-nats-common: &nats-common
    image: ${NATS_IMAGE}
    profiles: ['infra']
    logging: *default-logging
    networks: ['default']
    restart: always
    healthcheck:
        test: wget -qO- http://localhost:8222/varz || exit 1
        interval: 5s
        timeout: 5s

x-app-common: &app-common
    profiles: ['apps']
    logging: *default-logging
    environment: ['NODE_ENV=production']
    env_file: .env.test
    networks: ['default']

services:
    redis1:
        <<: *redis-common
        container_name: ${REDIS_HOST1}
    redis2:
        <<: *redis-common
        container_name: ${REDIS_HOST2}
    redis3:
        <<: *redis-common
        container_name: ${REDIS_HOST3}
    redis4:
        <<: *redis-common
        container_name: ${REDIS_HOST4}
    redis5:
        <<: *redis-common
        container_name: ${REDIS_HOST5}
    redis6:
        <<: *redis-common
        container_name: ${REDIS_HOST6}
    redis-setup:
        image: ${REDIS_IMAGE}
        container_name: ${PROJECT_NAME}-redis-setup
        profiles: ['infra']
        depends_on:
            redis1: { condition: service_healthy }
            redis2: { condition: service_healthy }
            redis3: { condition: service_healthy }
            redis4: { condition: service_healthy }
            redis5: { condition: service_healthy }
            redis6: { condition: service_healthy }
        command: >-
            sh -c "
            REDIS_LIST=\"redis1:$REDIS_PORT redis2:$REDIS_PORT redis3:$REDIS_PORT redis4:$REDIS_PORT redis5:$REDIS_PORT redis6:$REDIS_PORT\"

            echo 'yes' | redis-cli -a $REDIS_PASSWORD --cluster create $${REDIS_LIST} --cluster-replicas 1
            "
        networks: ['default']

    mongo-key-generator:
        image: ${MONGO_IMAGE}
        container_name: ${PROJECT_NAME}-mongo-key-generator
        profiles: ['infra']
        command: 'sh -c "openssl rand -base64 768 > mongodb.key && chmod 400 mongodb.key && chown mongodb:mongodb mongodb.key"'
        volumes: ['mongodb_key:/mongodb_key']
        working_dir: /mongodb_key
    mongo1:
        <<: *mongo-common
        container_name: ${MONGO_HOST1}
    mongo2:
        <<: *mongo-common
        container_name: ${MONGO_HOST2}
    mongo3:
        <<: *mongo-common
        container_name: ${MONGO_HOST3}
    mongo-setup:
        image: ${MONGO_IMAGE}
        container_name: ${PROJECT_NAME}-mongo-setup
        profiles: ['infra']
        depends_on:
            mongo1: { condition: service_healthy }
            mongo2: { condition: service_healthy }
            mongo3: { condition: service_healthy }
        networks: ['default']
        command: >
            sh -c "
            MONGO_HOST1_URI=\"mongodb://${MONGO_USERNAME}:${MONGO_PASSWORD}@mongo1:${MONGO_PORT}/?authSource=admin\"

            mongosh $${MONGO_HOST1_URI} --eval \"
                rs.initiate({
                    _id: \\\"${MONGO_REPLICA}\\\",
                    members: [{_id: 0, host: \\\"mongo1\\\"}, {_id: 1, host: \\\"mongo2\\\"}, {_id: 2, host: \\\"mongo3\\\"}]
                })
            \"

            MONGO_HOSTS=\"mongo1:${MONGO_PORT},mongo2:${MONGO_PORT},mongo3:${MONGO_PORT}\";
            MONGO_URI=\"mongodb://${MONGO_USERNAME}:${MONGO_PASSWORD}@$${MONGO_HOSTS}/?authSource=admin&replicaSet=${MONGO_REPLICA}\";

            mongosh $${MONGO_URI} --eval \"db.test.insertOne({test: 'test'})\"
            "
    nats1:
        <<: *nats-common
        container_name: ${NATS_HOST1}
        command: '--cluster_name ${NATS_CLUSTER} --cluster nats://0.0.0.0:6222 --http_port 8222'
    nats2:
        <<: *nats-common
        container_name: ${NATS_HOST2}
        command: '--cluster_name ${NATS_CLUSTER} --cluster nats://0.0.0.0:6222 --http_port 8222 --routes=nats://nats1:6222'
        depends_on: ['nats1']
    nats3:
        <<: *nats-common
        container_name: ${NATS_HOST3}
        command: '--cluster_name ${NATS_CLUSTER} --cluster nats://0.0.0.0:6222 --http_port 8222 --routes=nats://nats1:6222'
        depends_on: ['nats1']
    nats-setup:
        image: natsio/nats-box
        container_name: ${PROJECT_NAME}-nats-setup
        profiles: ['infra']
        depends_on:
            nats1: { condition: service_healthy }
            nats2: { condition: service_healthy }
            nats3: { condition: service_healthy }
        networks: ['default']
        command: >
            sh -c "
            set -e;
            nats sub -s nats://nats1:4222 hello &
            nats pub -s "nats://nats2:4222" hello first;
            nats pub -s "nats://nats3:4222" hello second;
            "

    gateway:
        <<: *app-common
        build: { context: ., args: { APP_IMAGE: $APP_IMAGE, TARGET_APP: gateway } }
        image: ${SERVICE_GATEWAY_HOST}
        container_name: ${SERVICE_GATEWAY_HOST}
        healthcheck:
            test: 'curl -f http://localhost:${SERVICE_GATEWAY_HTTP_PORT}/health'
            interval: 5s
            timeout: 5s
        volumes:
            - ./_output/logs/gateway:/app/_output/logs
            - ./_output/uploads:/app/_output/uploads

    applications:
        <<: *app-common
        build: { context: ., args: { APP_IMAGE: $APP_IMAGE, TARGET_APP: applications } }
        image: ${SERVICE_APPLICATIONS_HOST}
        container_name: ${SERVICE_APPLICATIONS_HOST}
        healthcheck:
            test: 'curl -f http://localhost:${SERVICE_APPLICATIONS_HTTP_PORT}/health'
            interval: 5s
            timeout: 5s
        volumes: ['./_output/logs/applications:/app/_output/logs']

    cores:
        <<: *app-common
        build: { context: ., args: { APP_IMAGE: $APP_IMAGE, TARGET_APP: cores } }
        image: ${SERVICE_CORES_HOST}
        container_name: ${SERVICE_CORES_HOST}
        healthcheck:
            test: 'curl -f http://localhost:${SERVICE_CORES_HTTP_PORT}/health'
            interval: 5s
            timeout: 5s
        volumes: ['./_output/logs/cores:/app/_output/logs']

    infrastructures:
        <<: *app-common
        build: { context: ., args: { APP_IMAGE: $APP_IMAGE, TARGET_APP: infrastructures } }
        image: ${SERVICE_INFRASTRUCTURES_HOST}
        container_name: ${SERVICE_INFRASTRUCTURES_HOST}
        healthcheck:
            test: 'curl -f http://localhost:${SERVICE_INFRASTRUCTURES_HTTP_PORT}/health'
            interval: 5s
            timeout: 5s
        volumes:
            - './_output/logs/infrastructures:/app/_output/logs'
            - './_output/uploads:/app/_output/uploads'

    apps-setup:
        image: ${APP_IMAGE}
        container_name: ${PROJECT_NAME}-apps-setup
        profiles: ['apps']
        depends_on:
            gateway: { condition: service_healthy }
            applications: { condition: service_healthy }
            cores: { condition: service_healthy }
            infrastructures: { condition: service_healthy }

networks:
    default: { external: true, name: '${PROJECT_NAME}' }

volumes:
    mongodb_key: {}
